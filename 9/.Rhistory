model <- glm(disease ~ thal + vessels + pain + sex + pres + peak + slope + angina + rate
+ age, training, family = binomial)
predictions <- predict(model, testing)
#}
confusionMatrix(predictions, testing$disease)
View(data)
View(data)
#calculating the cost of wrong prediction
library(caret)
#for(i in 1:10) {
inTraining <- createDataPartition(data$disease, p = 0.75, list = FALSE)
training <- data[ inTraining, ]
testing  <- data[-inTraining, ]
model <- glm(disease ~ thal + vessels + pain + sex + pres + peak + slope + angina + rate
+ age, training, family = binomial)
predictions <- predict(model, testing)
#}
confusionMatrix(factor(predictions, levels=c(1,2)), testing$disease)
#calculating the cost of wrong prediction
library(caret)
#for(i in 1:10) {
inTraining <- createDataPartition(data$disease, p = 0.75, list = FALSE)
training <- data[ inTraining, ]
testing  <- data[-inTraining, ]
model <- glm(disease ~ thal + vessels + pain + sex + pres + peak + slope + angina + rate
+ age, training, family = binomial)
predictions <- predict(model, testing, type='class')
#calculating the cost of wrong prediction
library(caret)
#for(i in 1:10) {
inTraining <- createDataPartition(data$disease, p = 0.75, list = FALSE)
training <- data[ inTraining, ]
testing  <- data[-inTraining, ]
model <- glm(disease ~ thal + vessels + pain + sex + pres + peak + slope + angina + rate
+ age, training, family = binomial)
predictions <- predict(model, testing)
#}
fitpredt <- function(t) ifelse(fitpred > t , 1,0)
confusionMatrix(fitpredt(predictions, 0.4), testing$disease)
#calculating the cost of wrong prediction
library(caret)
#for(i in 1:10) {
inTraining <- createDataPartition(data$disease, p = 0.75, list = FALSE)
training <- data[ inTraining, ]
testing  <- data[-inTraining, ]
model <- glm(disease ~ thal + vessels + pain + sex + pres + peak + slope + angina + rate
+ age, training, family = binomial)
predictions <- predict(model, testing)
fitpredt <- function(t) ifelse(fitpred > t , 1,0)
confusionMatrix(fitpredt(predictions, 0.4), testing$disease)
#calculating the cost of wrong prediction
library(caret)
#for(i in 1:10) {
inTraining <- createDataPartition(data$disease, p = 0.75, list = FALSE)
training <- data[ inTraining, ]
testing  <- data[-inTraining, ]
model <- glm(disease ~ thal + vessels + pain + sex + pres + peak + slope + angina + rate
+ age, training, family = binomial)
predictions <- predict(model, testing)
predt <- function(t) ifelse(predictions > t , 1,0)
confusionMatrix(fitpredt(0.4), testing$disease)
#calculating the cost of wrong prediction
library(caret)
#for(i in 1:10) {
inTraining <- createDataPartition(data$disease, p = 0.75, list = FALSE)
training <- data[ inTraining, ]
testing  <- data[-inTraining, ]
model <- glm(disease ~ thal + vessels + pain + sex + pres + peak + slope + angina + rate
+ age, training, family = binomial)
predictions <- predict(model, testing)
fitpredt <- function(t) ifelse(predictions > t , 1,0)
confusionMatrix(fitpredt(0.4), testing$disease)
#calculating the cost of wrong prediction
library(caret)
#for(i in 1:10) {
inTraining <- createDataPartition(data$disease, p = 0.75, list = FALSE)
training <- data[ inTraining, ]
testing  <- data[-inTraining, ]
model <- glm(disease ~ thal + vessels + pain + sex + pres + peak + slope + angina + rate
+ age, training, family = binomial)
predictions <- predict(model, testing)
fitpredt <- function(t) ifelse(predictions > t , 1, 2)
confusionMatrix(fitpredt(0.4), testing$disease)
#calculating the cost of wrong prediction
library(caret)
#for(i in 1:10) {
inTraining <- createDataPartition(data$disease, p = 0.75, list = FALSE)
training <- data[ inTraining, ]
testing  <- data[-inTraining, ]
model <- glm(disease ~ thal + vessels + pain + sex + pres + peak + slope + angina + rate
+ age, training, family = binomial)
predictions <- predict(model, testing)
fitpredt <- function(t) ifelse(predictions > t , 2, 1)
confusionMatrix(fitpredt(0.4), testing$disease)
#calculating the cost of wrong prediction
library(caret)
inTraining <- createDataPartition(data$disease, p = 0.75, list = FALSE)
training <- data[ inTraining, ]
testing  <- data[-inTraining, ]
model <- glm(disease ~ thal + vessels + pain + sex + pres + peak + slope + angina + rate
+ age, training, family = binomial)
predictions <- predict(model, testing)
fitpredt <- function(t) ifelse(predictions > t , 2, 1)
confusionMatrix(fitpredt(0.4), testing$disease)
#calculating the cost of wrong prediction
library(caret)
inTraining <- createDataPartition(data$disease, p = 0.75, list = FALSE)
training <- data[ inTraining, ]
testing  <- data[-inTraining, ]
model <- glm(disease ~ thal + vessels + pain + sex + pres + peak + slope + angina + rate
+ age, training, family = binomial)
predictions <- predict(model, testing)
fitpredt <- function(t) ifelse(predictions > t , 2, 1)
confusionMatrix(fitpredt(0.4), testing$disease)
#calculating the cost of wrong prediction
library(caret)
inTraining <- createDataPartition(data$disease, p = 0.75, list = FALSE)
training <- data[ inTraining, ]
testing  <- data[-inTraining, ]
model <- glm(disease ~ thal + vessels + pain + sex + pres + peak + slope + angina + rate
+ age, training, family = binomial)
predictions <- predict(model, testing)
fitpredt <- function(t) ifelse(predictions > t , 2, 1)
confusionMatrix(fitpredt(0.5), testing$disease)
#calculating the cost of wrong prediction
library(caret)
inTraining <- createDataPartition(data$disease, p = 0.75, list = FALSE)
training <- data[ inTraining, ]
testing  <- data[-inTraining, ]
model <- glm(disease ~ thal + vessels + pain + sex + pres + peak + slope + angina + rate
+ age, training, family = binomial)
predictions <- predict(model, testing)
fitpredt <- function(t) ifelse(predictions > t , 2, 1)
confusionMatrix(fitpredt(0.6), testing$disease)
#calculating the cost of wrong prediction
library(caret)
inTraining <- createDataPartition(data$disease, p = 0.75, list = FALSE)
training <- data[ inTraining, ]
testing  <- data[-inTraining, ]
model <- glm(disease ~ thal + vessels + pain + sex + pres + peak + slope + angina + rate
+ age, training, family = binomial)
predictions <- predict(model, testing)
fitpredt <- function(t) ifelse(predictions > t , 2, 1)
confusionMatrix(fitpredt(0.7), testing$disease)
#calculating the cost of wrong prediction
library(caret)
inTraining <- createDataPartition(data$disease, p = 0.75, list = FALSE)
training <- data[ inTraining, ]
testing  <- data[-inTraining, ]
model <- glm(disease ~ thal + vessels + pain + sex + pres + peak + slope + angina + rate
+ age, training, family = binomial)
predictions <- predict(model, testing)
fitpredt <- function(t) ifelse(predictions > t , 2, 1)
confusionMatrix(fitpredt(0.8), testing$disease)
#calculating the cost of wrong prediction
library(caret)
inTraining <- createDataPartition(data$disease, p = 0.75, list = FALSE)
training <- data[ inTraining, ]
testing  <- data[-inTraining, ]
model <- glm(disease ~ thal + vessels + pain + sex + pres + peak + slope + angina + rate
+ age, training, family = binomial)
predictions <- predict(model, testing)
fitpredt <- function(t) ifelse(predictions > t , 2, 1)
confusionMatrix(fitpredt(0.76), testing$disease)
#calculating the cost of wrong prediction
library(caret)
inTraining <- createDataPartition(data$disease, p = 0.75, list = FALSE)
training <- data[ inTraining, ]
testing  <- data[-inTraining, ]
model <- glm(disease ~ thal + vessels + pain + sex + pres + peak + slope + angina + rate
+ age, training, family = binomial)
predictions <- predict(model, testing)
fitpredt <- function(t) ifelse(predictions > t , 2, 1)
confusionMatrix(fitpredt(0.75), testing$disease)
#calculating the cost of wrong prediction
library(caret)
inTraining <- createDataPartition(data$disease, p = 0.75, list = FALSE)
training <- data[ inTraining, ]
testing  <- data[-inTraining, ]
model <- glm(disease ~ thal + vessels + pain + sex + pres + peak + slope + angina + rate
+ age, training, family = binomial)
predictions <- predict(model, testing)
fitpredt <- function(t) ifelse(predictions > t , 2, 1)
confusionMatrix(fitpredt(0.77), testing$disease)
#calculating the cost of wrong prediction
library(caret)
inTraining <- createDataPartition(data$disease, p = 0.75, list = FALSE)
training <- data[ inTraining, ]
testing  <- data[-inTraining, ]
model <- glm(disease ~ thal + vessels + pain + sex + pres + peak + slope + angina + rate
+ age, training, family = binomial)
predictions <- predict(model, testing)
fitpredt <- function(t) ifelse(predictions > t , 2, 1)
confusionMatrix(fitpredt(0.76), testing$disease)
#calculating the cost of wrong prediction
library(caret)
inTraining <- createDataPartition(data$disease, p = 0.75, list = FALSE)
training <- data[ inTraining, ]
testing  <- data[-inTraining, ]
model <- glm(disease ~ thal + vessels + pain + sex + pres + peak + slope + angina + rate
+ age, training, family = binomial)
predictions <- predict(model, testing)
fitpredt <- function(t) ifelse(predictions > t , 2, 1)
confusionMatrix(fitpredt(0.76), testing$disease)
#calculating the cost of wrong prediction
library(caret)
inTraining <- createDataPartition(data$disease, p = 0.75, list = FALSE)
training <- data[ inTraining, ]
testing  <- data[-inTraining, ]
model <- glm(disease ~ thal + vessels + pain + sex + pres + peak + slope + angina + rate
+ age, training, family = binomial)
predictions <- predict(model, testing)
fitpredt <- function(t) ifelse(predictions > t , 2, 1)
confusionMatrix(fitpredt(0.76), testing$disease)
#calculating the cost of wrong prediction
library(caret)
inTraining <- createDataPartition(data$disease, p = 0.75, list = FALSE)
training <- data[ inTraining, ]
testing  <- data[-inTraining, ]
model <- glm(disease ~ thal + vessels + pain + sex + pres + peak + slope + angina + rate
+ age, training, family = binomial)
predictions <- predict(model, testing)
fitpredt <- function(t) ifelse(predictions > t , 2, 1)
confusionMatrix(fitpredt(0.76), testing$disease)
set.seed(930)
#calculating the cost of wrong prediction
library(caret)
inTraining <- createDataPartition(data$disease, p = 0.75, list = FALSE)
training <- data[ inTraining, ]
testing  <- data[-inTraining, ]
model <- glm(disease ~ thal + vessels + pain + sex + pres + peak + slope + angina + rate
+ age, training, family = binomial)
predictions <- predict(model, testing)
fitpredt <- function(t) ifelse(predictions > t , 2, 1)
confusionMatrix(fitpredt(0.76), testing$disease)
set.seed(12)
#calculating the cost of wrong prediction
library(caret)
inTraining <- createDataPartition(data$disease, p = 0.75, list = FALSE)
training <- data[ inTraining, ]
testing  <- data[-inTraining, ]
model <- glm(disease ~ thal + vessels + pain + sex + pres + peak + slope + angina + rate
+ age, training, family = binomial)
predictions <- predict(model, testing)
fitpredt <- function(t) ifelse(predictions > t , 2, 1)
confusionMatrix(fitpredt(0.76), testing$disease)
set.seed(12)
#calculating the cost of wrong prediction
library(caret)
inTraining <- createDataPartition(data$disease, p = 0.75, list = FALSE)
training <- data[ inTraining, ]
testing  <- data[-inTraining, ]
model <- glm(disease ~ thal + vessels + pain + sex + pres + peak + slope + angina + rate
+ age, training, family = binomial)
predictions <- predict(model, testing)
fitpredt <- function(t) ifelse(predictions > t , 2, 1)
confusionMatrix(fitpredt(0.76), testing$disease)
set.seed(13)
#calculating the cost of wrong prediction
library(caret)
inTraining <- createDataPartition(data$disease, p = 0.75, list = FALSE)
training <- data[ inTraining, ]
testing  <- data[-inTraining, ]
model <- glm(disease ~ thal + vessels + pain + sex + pres + peak + slope + angina + rate
+ age, training, family = binomial)
predictions <- predict(model, testing)
fitpredt <- function(t) ifelse(predictions > t , 2, 1)
confusionMatrix(fitpredt(0.76), testing$disease)
set.seed(7)
#calculating the cost of wrong prediction
library(caret)
inTraining <- createDataPartition(data$disease, p = 0.75, list = FALSE)
training <- data[ inTraining, ]
testing  <- data[-inTraining, ]
model <- glm(disease ~ thal + vessels + pain + sex + pres + peak + slope + angina + rate
+ age, training, family = binomial)
predictions <- predict(model, testing)
fitpredt <- function(t) ifelse(predictions > t , 2, 1)
confusionMatrix(fitpredt(0.76), testing$disease)
set.seed(11)
#calculating the cost of wrong prediction
library(caret)
inTraining <- createDataPartition(data$disease, p = 0.75, list = FALSE)
training <- data[ inTraining, ]
testing  <- data[-inTraining, ]
model <- glm(disease ~ thal + vessels + pain + sex + pres + peak + slope + angina + rate
+ age, training, family = binomial)
predictions <- predict(model, testing)
fitpredt <- function(t) ifelse(predictions > t , 2, 1)
confusionMatrix(fitpredt(0.76), testing$disease)
set.seed(45)
#calculating the cost of wrong prediction
library(caret)
inTraining <- createDataPartition(data$disease, p = 0.75, list = FALSE)
training <- data[ inTraining, ]
testing  <- data[-inTraining, ]
model <- glm(disease ~ thal + vessels + pain + sex + pres + peak + slope + angina + rate
+ age, training, family = binomial)
predictions <- predict(model, testing)
fitpredt <- function(t) ifelse(predictions > t , 2, 1)
confusionMatrix(fitpredt(0.76), testing$disease)
set.seed(90)
#calculating the cost of wrong prediction
library(caret)
inTraining <- createDataPartition(data$disease, p = 0.75, list = FALSE)
training <- data[ inTraining, ]
testing  <- data[-inTraining, ]
model <- glm(disease ~ thal + vessels + pain + sex + pres + peak + slope + angina + rate
+ age, training, family = binomial)
predictions <- predict(model, testing)
fitpredt <- function(t) ifelse(predictions > t , 2, 1)
confusionMatrix(fitpredt(0.76), testing$disease)
set.seed(90)
#calculating the cost of wrong prediction
library(caret)
cv <- function(model, k, data, y){
for(i in 1:k){
set.seed(i)
inTraining <- createDataPartition(data$disease, p = 0.9, list = FALSE)
training <- data[ inTraining, ]
testing  <- data[-inTraining, ]
predictions <- predictions + predict(model, testing)
}
predictions  <- predictions/k
}
model <- glm(disease ~ thal + vessels + pain + sex + pres + peak + slope + angina + rate
+ age, training, family = binomial)
predictions <- cv(model, k, data, data$disease)
set.seed(90)
#calculating the cost of wrong prediction
library(caret)
cv <- function(model, k, data, y){
for(i in 1:k){
set.seed(i)
inTraining <- createDataPartition(data$disease, p = 0.9, list = FALSE)
training <- data[ inTraining, ]
testing  <- data[-inTraining, ]
predictions <- predictions + predict(model, testing)
}
predictions  <- predictions/k
}
model <- glm(disease ~ thal + vessels + pain + sex + pres + peak + slope + angina + rate
+ age, training, family = binomial)
predictions <- cv(model, 10, data, data$disease)
#fitpredt <- function(t) ifelse(predictions > t , 2, 1)
#confusionMatrix(fitpredt(0.76), testing$disease)
debugSource('~/test.R')
for(i in 1:k+1){
set.seed(i)
inTraining <- createDataPartition(data$disease, p = 0.9, list = FALSE)
training <- data[ inTraining, ]
testing  <- data[-inTraining, ]
preds[i-1] <- predict(model, testing)
}
debugSource('~/test.R')
debugSource('~/test.R')
debugSource('~/test.R')
View(preds)
preds <- matrix(data=list(),nrow=10,27)
for(i in 1:k+1){
set.seed(i)
inTraining <- createDataPartition(data$disease, p = 0.9, list = FALSE)
training <- data[ inTraining, ]
testing  <- data[-inTraining, ]
preds[i-1,] <- as.vector(predict(model, testing))
}
View(preds)
View(preds)
debugSource('~/test.R', echo=TRUE)
View(preds)
View(preds)
Q
debugSource('~/test.R', echo=TRUE)
debugSource('~/test.R', echo=TRUE)
0.1*length(data[1,])
length(data[1,])
debugSource('~/test.R', echo=TRUE)
0.1*length(data[,1])
debugSource('~/test.R', echo=TRUE)
debugSource('~/test.R', echo=TRUE)
View(preds)
View(preds)
lapply(preds,colMeans)
dim(preds)
lapply(preds,2,mean)
apply(preds,2,mean)
for(i in 1:k+1){
set.seed(i)
inTraining <- createDataPartition(data$disease, p = 0.9, list = FALSE)
training <- data[ inTraining, ]
testing  <- data[-inTraining, ]
preds[i-1,] <- as.vector(predict(model, testing))
}
resultsmean <- lapply(preds, colMeans)
resultsmean <- lapply(preds, colMeans)
for(i in 1:k+1){
set.seed(i)
inTraining <- createDataPartition(data$disease, p = 0.9, list = FALSE)
training <- data[ inTraining, ]
testing  <- data[-inTraining, ]
preds[i-1,] <- as.vector(predict(model, testing))
}
debugSource('~/test.R', echo=TRUE)
colMeans(preds)
colMeans(as.numeric(preds)
)
Q
debugSource('~/test.R', echo=TRUE)
apply(preds,2,mean)
set.seed(90)
#calculating the cost of wrong prediction
library(caret)
inTraining <- createDataPartition(data$disease, p = 0.9, list = FALSE)
training <- data[ inTraining, ]
testing  <- data[-inTraining, ]
predictions <- predict(model, testing)
model <- glm(disease ~ thal + vessels + pain + sex + pres + peak + slope + angina + rate
+ age, training, family = binomial)
predictions <- cv(model, 10, data, data$disease)
fitpredt <- function(t) ifelse(predictions > t , 2, 1)
confusionMatrix(fitpredt(0.76), testing$disease)
set.seed(90)
#calculating the cost of wrong prediction
library(caret)
inTraining <- createDataPartition(data$disease, p = 0.9, list = FALSE)
training <- data[ inTraining, ]
testing  <- data[-inTraining, ]
predictions <- predict(model, testing)
model <- glm(disease ~ thal + vessels + pain + sex + pres + peak + slope + angina + rate
+ age, training, family = binomial)
predictions <- cv(model, 10, data, data$disease)
fitpredt <- function(t) ifelse(predictions > t , 2, 1)
confusionMatrix(fitpredt(0.76), testing$disease)
set.seed(90)
#calculating the cost of wrong prediction
library(caret)
inTraining <- createDataPartition(data$disease, p = 0.7, list = FALSE)
training <- data[ inTraining, ]
testing  <- data[-inTraining, ]
predictions <- predict(model, testing)
model <- glm(disease ~ thal + vessels + pain + sex + pres + peak + slope + angina + rate
+ age, training, family = binomial)
predictions <- cv(model, 10, data, data$disease)
fitpredt <- function(t) ifelse(predictions > t , 2, 1)
confusionMatrix(fitpredt(0.76), testing$disease)
set.seed(93)
#calculating the cost of wrong prediction
library(caret)
inTraining <- createDataPartition(data$disease, p = 0.7, list = FALSE)
training <- data[ inTraining, ]
testing  <- data[-inTraining, ]
predictions <- predict(model, testing)
model <- glm(disease ~ thal + vessels + pain + sex + pres + peak + slope + angina + rate
+ age, training, family = binomial)
predictions <- cv(model, 10, data, data$disease)
set.seed(93)
#calculating the cost of wrong prediction
library(caret)
inTraining <- createDataPartition(data$disease, p = 0.7, list = FALSE)
training <- data[ inTraining, ]
testing  <- data[-inTraining, ]
predictions <- predict(model, testing)
model <- glm(disease ~ thal + vessels + pain + sex + pres + peak + slope + angina + rate
+ age, training, family = binomial)
predictions <- cv(model, 10, data, data$disease)
fitpredt <- function(t) ifelse(predictions > t , 2, 1)
confusionMatrix(fitpredt(0.76), testing$disease)
set.seed(97)
#calculating the cost of wrong prediction
library(caret)
inTraining <- createDataPartition(data$disease, p = 0.7, list = FALSE)
training <- data[ inTraining, ]
testing  <- data[-inTraining, ]
predictions <- predict(model, testing)
model <- glm(disease ~ thal + vessels + pain + sex + pres + peak + slope + angina + rate
+ age, training, family = binomial)
predictions <- cv(model, 10, data, data$disease)
fitpredt <- function(t) ifelse(predictions > t , 2, 1)
confusionMatrix(fitpredt(0.76), testing$disease)
debugSource('~/R_workspace/k_cv.R', echo=TRUE)
setwd("~/Desktop/S2017/StatisticalLearning/Exercises/9")
+ age, training, family = binomial)
setwd("~/Desktop/S2017/StatisticalLearning/Exercises/9")
library(caret)
k_cv <- function(model, data, k, Y){
errors <- rep(0, k)
for(i in 1:k) {
set.seed(i)
inTraining <- createDataPartition(Y, p = 1-1/k, list = FALSE)
training <- data[ inTraining, ]
testing <- data[-inTraining, ]
predictions <- predict(model, testing, type="response")
fitpredt <- function(t) ifelse(predictions > t , 2, 1)
errors[i] <- sum((Y[testing[,1]]!=fitpredt(0.5))^2)
}
return (mean(errors))
}
data <- read.table("DataHeart.txt", header=T)
summary(data)
data <- data[-1]
data <- data[which(data$age >= 20),]
data <- data[which(data$gramstein > 6),]
data$sex <- as.factor(data$sex)
data$pain <- as.factor(data$pain)
data$disease <- as.factor(data$disease)
data$electro <- as.factor(data$electro)
data$vessels <- as.factor(data$vessels)
data$thal <- as.factor(data$thal)
data$sugar <- as.factor(data$sugar)
model <- glm(disease ~ thal + vessels + pain + sex + pres + peak + slope + angina + rate
+ age, data, family = binomial)
debugSource('~/R_workspace/k_cv.R', echo=TRUE)
